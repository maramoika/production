{"version":3,"sources":["components/Header.js","components/ToDoItem.js","components/ContactCard.js","components/Profile.js","components/Profiles.js","components/MyInfo.js","components/MainContent.js","App.js","index.js"],"names":["Header","className","Component","ContactCard","Profile","style","padding","class","src","width","height","display","flexDirection","alignContent","paddingLeft","this","props","profile","name","age","bio","React","MyInfo","MainContent","Date","App","ReactDOM","render","document","getElementById"],"mappings":"wMAceA,MARf,WACE,OACE,4BAAQC,UAAU,UAChB,4C,iDCFiBC,YCSRC,IC6BAC,E,iLA9BX,OACE,yBAAKC,MAAO,CAAEC,QAAS,KACrB,yBAAKC,MAAM,UACT,yBACEC,IAAI,uDACJH,MAAO,CAAEI,MAAO,IAAKC,OAAQ,OAG/B,yBACEL,MAAO,CACLM,QAAS,OACTC,cAAe,SACfC,aAAc,SACdC,YAAa,KAGf,4BAAKC,KAAKC,MAAMC,QAAQC,MAExB,mCACQH,KAAKC,MAAMC,QAAQE,IACzB,6BAFF,QAGQJ,KAAKC,MAAMC,QAAQG,Y,GAvBjBC,IAAMnB,WCLLmB,IAAMnB,UCuCdoB,MApCf,WACE,OACE,yBAAKrB,UAAU,YAab,kBAAC,EAAD,QCRSsB,MAXf,WAIE,OAFa,IAAIC,KAGf,6BACE,kBAAC,EAAD,QCSSC,MAjBf,WACE,OACE,6BACE,kBAAC,EAAD,QCkBNC,IAASC,OAEP,kBAAC,EAAD,MACAC,SAASC,eAAe,W","file":"static/js/main.e7750938.chunk.js","sourcesContent":["import React from \"react\";\r\n//the ReactDOM object is used to render React elements/components inside the real DOM.\r\nimport ReactDOM from \"react-dom\";\r\n\r\n//Footer (cap F) vs footer (small f) - Footer is a React component,\r\n//whereas footer is a JSX element. Components RENDER elements.\r\nfunction Header() {\r\n  return (\r\n    <header className=\"header\">\r\n      <h3>Shit to do</h3>\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","import React, { Component } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\n/*for comments etc - \r\nhttps://www.youtube.com/watch?v=e_ZibOe77yo\r\nhttps://www.youtube.com/watch?v=BaRtXhcD9O4*/\r\n\r\nclass ToDoItem extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      newItem: \"\",\r\n      list: []\r\n    };\r\n  }\r\n\r\n  //Parameters allow a function to perform tasks without knowing the specific input values ahead of time.\r\n  updateInput(key, value) {\r\n    this.setState({ [key]: value });\r\n  }\r\n\r\n  addItem() {\r\n    //create item with unique id\r\n    const newItem = {\r\n      id: 1 + Math.random(),\r\n      //make a copy of state.newItem without altering original item\r\n      value: this.state.newItem.slice()\r\n    };\r\n\r\n    //make copy of current list of items -\r\n    //place the contents of state.list into individual elements\r\n    const list = [...this.state.list];\r\n\r\n    //add new item to the list\r\n    list.push(newItem);\r\n\r\n    //update state with new list and reset newItem input\r\n    this.setState({ list, newItem: \"\" });\r\n  }\r\n\r\n  deleteItem(id) {\r\n    //copy current list of items\r\n    const list = [...this.state.list];\r\n    console.log(list);\r\n\r\n    //filter out item to be deleted\r\n    const updatedList = list.filter(item => item.id !== id);\r\n\r\n    //update state\r\n    this.setState({ list: updatedList });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"todo-item\">\r\n        <div>\r\n          Add an item...\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Type item here...\"\r\n            value={this.state.newItem}\r\n            onChange={e => this.updateInput(\"newItem\", e.target.value)}\r\n          />\r\n          <button onClick={() => this.addItem()}>Add item</button>\r\n          <br />\r\n          <ol>\r\n            {this.state.list.map(item => {\r\n              return (\r\n                <li key={item.id}>\r\n                  {item.value}\r\n                  <button onClick={() => this.deleteItem(item.id)}>X</button>\r\n                </li>\r\n              );\r\n            })}\r\n          </ol>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default ToDoItem;\r\n","import React, { Component } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nfunction ContactCard(props) {\r\n  //this component contains four pieces of dynamic information - props.\r\n  console.log(\"Props: \", { props });\r\n  return (\r\n    <div className=\"contact-card\">\r\n      <img src={props.imgUrl} />\r\n      <h3>{props.name}</h3>\r\n      <p>Phone: {props.phone}</p>\r\n      <p>Email: {props.email}</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ContactCard;\r\n","import React, { Component } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\n//https://www.youtube.com/watch?v=UAssn1S0UkU\r\n\r\n{\r\n  /* this component renders data from the Profiles component. \r\n    how, you saymasay? ligma.\r\n    \r\n    We're going to pass the profile in as a prop to the this component, so it can be used here. This is achieved by THIS.PROPS.profile.name etc. \r\n  \r\n  */\r\n}\r\nclass Profile extends React.Component {\r\n  render() {\r\n    return (\r\n      <div style={{ padding: 19 }}>\r\n        <div class=\"imgDiv\">\r\n          <img\r\n            src=\"http://uploads.mixer.com/avatar/jf7qalfa-8499245.jpg\"\r\n            style={{ width: 150, height: 150 }}\r\n          />\r\n\r\n          <div\r\n            style={{\r\n              display: \"flex\",\r\n              flexDirection: \"column\",\r\n              alignContent: \"center\",\r\n              paddingLeft: 40\r\n            }}\r\n          >\r\n            <h4>{this.props.profile.name}</h4>\r\n\r\n            <p>\r\n              Age: {this.props.profile.age}\r\n              <br />\r\n              Bio: {this.props.profile.bio}\r\n            </p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    ); //return main\r\n  } //render\r\n} //component\r\n\r\nexport default Profile;\r\n","import React, { Component } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport Profile from \"./Profile\";\r\n\r\n//https://www.youtube.com/watch?v=UAssn1S0UkU\r\n//https://www.youtube.com/watch?v=DJtI3Pogd88\r\n//https://www.youtube.com/watch?v=DLX62G4lc44\r\n\r\nclass Profiles extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      top_profiles: [\r\n        { name: \"EM\", age: 30, bio: \"is engineer man \" },\r\n        { name: \"DM\", age: 34, bio: \"is super fuck you man \" },\r\n        { name: \"Dimitri\", age: 38, bio: \"is a mid-weight React developer \" }\r\n      ],\r\n      other_profiles: [\r\n        { name: \"Profile 1\", age: 20, bio: \"is prof 1\" },\r\n        { name: \"Profile 2\", age: 22, bio: \"is prof 2\" },\r\n        { name: \"Profile 3\", age: 24, bio: \"is prof 3\" },\r\n        { name: \"Profile 4\", age: 25, bio: \"is prof 4\" },\r\n        { name: \"Profile 5\", age: 29, bio: \"is prof 5\" }\r\n      ],\r\n\r\n      crap_profiles: [\r\n        { name: \"Crap Profile 1\", age: 29, bio: \"is crap prof 1\" },\r\n        { name: \"Crap Profile 2\", age: 67, bio: \"is crap prof 2\" },\r\n        { name: \"Crap Profile 3\", age: 21, bio: \"is crap prof 3\" },\r\n        { name: \"Crap Profile 4\", age: 36, bio: \"is crap prof 4\" },\r\n        { name: \"Crap Profile 5\", age: 45, bio: \"is crap prof 5\" }\r\n      ]\r\n    };\r\n  } //constructor\r\n\r\n  render() {\r\n    return (\r\n      <div style={{ padding: 10 }}>\r\n        <h3>Top Profiles</h3>\r\n        {this.state.top_profiles.map(profile => (\r\n          <Profile profile={profile} />\r\n        ))}\r\n        <h3>Other Profies</h3>\r\n        {this.state.other_profiles.map(profile => (\r\n          <Profile profile={profile} />\r\n        ))}\r\n        <h3>Crap Profiles</h3>\r\n        {this.state.crap_profiles.map(profile => (\r\n          <Profile profile={profile} />\r\n        ))}\r\n      </div>\r\n    ); //return main\r\n  } //render\r\n} //component\r\n\r\nexport default Profiles;\r\n","//import React is needed wherever JSX is present\r\nimport React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport ToDoItem from \"./ToDoItem\";\r\nimport ContactCard from \"./ContactCard\";\r\nimport Profiles from \"./Profiles\";\r\nimport Header from \"./Header\";\r\n//functional (coz function) component\r\n//jsx\r\n\r\n//ToDoItem container\r\nfunction MyInfo() {\r\n  return (\r\n    <div className=\"contacts\">\r\n      {/*<ContactCard\r\n        name=\"Mr Whiskerson\"\r\n        imgUrl=\"http://placekitten.com/300/200/\"\r\n        phone=\"(302) 332-3030\"\r\n        email=\"whiskers@whiskers.net\"\r\n      />\r\n      <ContactCard\r\n        name=\"Cuntcat\"\r\n        imgUrl=\"http://placekitten.com/400/300/\"\r\n        phone=\"(301) 339-2040\"\r\n        email=\"cunt@cat.com\"\r\n      */}\r\n      <Header />\r\n    </div>\r\n  );\r\n}\r\n\r\n/*<div className=\"contacts\">\r\n      <ContactCard\r\n        name=\"Mr Whiskerson\"\r\n        imgUrl=\"http://placekitten.com/300/200/\"\r\n        phone=\"(302) 332-3030\"\r\n        email=\"whiskers@whiskers.net\"\r\n      />\r\n      <ContactCard\r\n        name=\"Cuntcat\"\r\n        imgUrl=\"http://placekitten.com/400/300/\"\r\n        phone=\"(301) 339-2040\"\r\n        email=\"cunt@cat.com\"\r\n      />\r\n    </div>*/\r\n\r\n//make this func component available to other spaces within the app\r\nexport default MyInfo;\r\n","import React from \"react\";\r\n//the ReactDOM object is used to render React elements/components inside the real DOM.\r\nimport ReactDOM from \"react-dom\";\r\nimport MyInfo from \"./MyInfo\";\r\n\r\n//Footer (cap F) vs footer (small f) - Footer is a React component,\r\n//whereas footer is a JSX element. Components RENDER elements.\r\nfunction MainContent() {\r\n  const styles = { color: \"#FFCCCC\", backgroundColor: \"black\" };\r\n  const date = new Date();\r\n\r\n  return (\r\n    <div>\r\n      <MyInfo />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MainContent;\r\n","import React, { Component } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport Header from \"./components/Header\";\r\nimport MainContent from \"./components/MainContent\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div>\r\n      <MainContent />\r\n    </div>\r\n  );\r\n}\r\n\r\n/*function App() {\r\n  return (\r\n    <div>\r\n      <Header />\r\n      <MainContent />\r\n    </div>\r\n  );\r\n}*/\r\n\r\nexport default App;\r\n","//https://codeburst.io/declarative-vs-imperative-programming-a8a7c93d9ad2\r\n\r\n//pint to remember - everything is ultimately translated to HTML. EQUIVALENCE: each program statement translates to a certain number of actions at machine level.\r\n\r\n//'react' is the module, and React is the object imported from that module.\r\n// React uses hot module reloading - whenever changes are saved, the app\r\n// is automatically restarted.\r\nimport React from \"react\";\r\n//the ReactDOM object is used to render React elements/components inside the real DOM.\r\nimport ReactDOM from \"react-dom\";\r\n\r\n//import MyInfo from \"./components/MyInfo\";\r\nimport App from \"./App\";\r\n\r\n//the <h1>Hello cunt</h1> JSX expression results in a React element, 'element',\r\n//which is part of the virtual DOM. Remember that when the state changes, virtual //DOM will compare the new state to the previous state, and it'll then reach out to the real browswer DOM and update it accordingly.\r\n//const element = <h1>Hello cunt</h1>;\r\n\r\n//the console will show the output of the above JSX expression.\r\n// the 'element' object is part of the virtual DOM, not the real browser DOM.\r\n//console.log(element);\r\n\r\n//the first arg of ReactDOM's render() method is the 'element' object we want to render.\r\n//the second arg of render() is the location of the DOM element in the real DOM where we want to render the 'element' object. Because the element is in the real DOM, we use vanilla JS to obtain a reference to that DOM element.\r\n//why html within js? coz this is a JSX expression. this is why the\r\n//'import React' is needed - coz the React library enables JSX interpreter.\r\nReactDOM.render(\r\n  //jsx tag - self-closing component. SCC means no children elements.\r\n  <App />,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n/*The React example never actually touches an element. it simply declares an element should be rendered given our current state. It does not actually manipulate the DOM itself */\r\n"],"sourceRoot":""}